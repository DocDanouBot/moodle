import ModalBackdrop from"core/modal_backdrop";import Templates from"core/templates";import*as Aria from"core/aria";import{dispatchEvent}from"core/event_dispatcher";import{debounce}from"core/utils";import{isSmall,isLarge}from"core/pagehelpers";import Pending from"core/pending";import{setUserPreference}from"core_user/repository";import jQuery from"jquery";let backdropPromise=null;const drawerMap=new Map;const SELECTORS={BUTTONS:'[data-toggler="drawers"]',CLOSEBTN:'[data-toggler="drawers"][data-action="closedrawer"]',OPENBTN:'[data-toggler="drawers"][data-action="opendrawer"]',TOGGLEBTN:'[data-toggler="drawers"][data-action="toggle"]',DRAWERS:'[data-region="fixed-drawer"]',DRAWERCONTENT:".drawercontent",PAGECONTENT:"#page-content",HEADERCONTENT:".drawerheadercontent"};const CLASSES={SCROLLED:"scrolled",SHOW:"show",NOTINITIALISED:"not-initialized"};const THRESHOLD=20;const getDrawerZIndex=()=>{const drawer=document.querySelector(SELECTORS.DRAWERS);if(!drawer){return null}return parseInt(window.getComputedStyle(drawer).zIndex,10)};const getBackdrop=()=>{if(!backdropPromise){backdropPromise=Templates.render("core/modal_backdrop",{}).then(html=>new ModalBackdrop(html)).then(modalBackdrop=>{const drawerZindex=getDrawerZIndex();if(drawerZindex){modalBackdrop.setZIndex(getDrawerZIndex()-1)}modalBackdrop.getAttachmentPoint().get(0).addEventListener("click",e=>{e.preventDefault();Drawers.closeAllDrawers()});return modalBackdrop}).catch()}return backdropPromise};const getDrawerOpenButton=drawerId=>{let openButton=document.querySelector(`${SELECTORS.OPENBTN}[data-target="${drawerId}"]`);if(!openButton){openButton=document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target="${drawerId}"]`)}return openButton};const disableDrawerTooltips=drawerNode=>{const buttons=[drawerNode.querySelector(SELECTORS.CLOSEBTN),getDrawerOpenButton(drawerNode.id)];buttons.forEach(button=>{if(!button){return}disableButtonTooltip(button)})};const disableButtonTooltip=(button,enableOnBlur)=>{if(button.hasAttribute("data-original-title")){jQuery(button).tooltip("disable");button.setAttribute("title",button.dataset.originalTitle)}else{button.dataset.disabledToggle=button.dataset.toggle;button.removeAttribute("data-toggle")}if(enableOnBlur){button.dataset.restoreTooltipOnBlur=true}};const enableDrawerTooltips=drawerNode=>{const buttons=[drawerNode.querySelector(SELECTORS.CLOSEBTN),getDrawerOpenButton(drawerNode.id)];buttons.forEach(button=>{if(!button){return}enableButtonTooltip(button)})};const enableButtonTooltip=button=>{if(button.hasAttribute("data-original-title")){jQuery(button).tooltip("enable");button.removeAttribute("title")}else if(button.dataset.disabledToggle){button.dataset.toggle=button.dataset.disabledToggle;jQuery(button).tooltip()}delete button.dataset.restoreTooltipOnBlur};const addInnerScrollListener=drawerNode=>{const content=drawerNode.querySelector(SELECTORS.DRAWERCONTENT);if(!content){return}content.addEventListener("scroll",()=>{drawerNode.classList.toggle(CLASSES.SCROLLED,content.scrollTop!=0)})};export default class Drawers{drawerNode=null;boundingRect=null;constructor(drawerNode){if(drawerNode.dataset.behatFakeDrawer!==undefined){return}this.drawerNode=drawerNode;if(isSmall()){this.closeDrawer({focusOnOpenButton:false,updatePreferences:false})}if(this.drawerNode.classList.contains(CLASSES.SHOW)){this.openDrawer({focusOnCloseButton:false,setUserPref:false})}else if(this.drawerNode.dataset.forceopen==1){if(!isSmall()){this.openDrawer({focusOnCloseButton:false,setUserPref:false})}}else{Aria.hide(this.drawerNode)}if(isSmall()){disableDrawerTooltips(this.drawerNode)}addInnerScrollListener(this.drawerNode);drawerMap.set(drawerNode,this);drawerNode.classList.remove(CLASSES.NOTINITIALISED)}get isOpen(){return this.drawerNode.classList.contains(CLASSES.SHOW)}get closeOnResize(){return!!parseInt(this.drawerNode.dataset.closeOnResize)}static eventTypes={drawerShow:"theme_boost/drawers:show",drawerShown:"theme_boost/drawers:shown",drawerHide:"theme_boost/drawers:hide",drawerHidden:"theme_boost/drawers:hidden"};static getDrawerInstanceForNode(drawerNode){if(!drawerMap.has(drawerNode)){new Drawers(drawerNode)}return drawerMap.get(drawerNode)}dispatchEvent(eventname,cancelable=false){return dispatchEvent(eventname,{drawerInstance:this},this.drawerNode,{cancelable:cancelable})}openDrawer({focusOnCloseButton=true,setUserPref=true}={}){const pendingPromise=new Pending("theme_boost/drawers:open");const showEvent=this.dispatchEvent(Drawers.eventTypes.drawerShow,true);if(showEvent.defaultPrevented){return}this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle("hidden",true);this.drawerNode.querySelector(SELECTORS.HEADERCONTENT)?.classList.toggle("hidden",true);let openButton=getDrawerOpenButton(this.drawerNode.id);if(openButton&&openButton.hasAttribute("data-original-title")){jQuery(openButton)?.tooltip("hide")}Aria.unhide(this.drawerNode);this.drawerNode.classList.add(CLASSES.SHOW);const preference=this.drawerNode.dataset.preference;if(preference&&!isSmall()&&this.drawerNode.dataset.forceopen!=1&&setUserPref){setUserPreference(preference,true)}const state=this.drawerNode.dataset.state;if(state){const page=document.getElementById("page");page.classList.add(state)}this.boundingRect=this.drawerNode.getBoundingClientRect();if(isSmall()){getBackdrop().then(backdrop=>{backdrop.show();const pageWrapper=document.getElementById("page");pageWrapper.style.overflow="hidden";return backdrop}).catch()}const closeButton=this.drawerNode.querySelector(SELECTORS.CLOSEBTN);const headerContent=this.drawerNode.querySelector(SELECTORS.HEADERCONTENT);if(focusOnCloseButton&&closeButton){disableButtonTooltip(closeButton,true)}setTimeout(()=>{closeButton.classList.toggle("hidden",false);headerContent.classList.toggle("hidden",false);if(focusOnCloseButton){closeButton.focus()}pendingPromise.resolve()},300);this.dispatchEvent(Drawers.eventTypes.drawerShown)}closeDrawer({focusOnOpenButton=true,updatePreferences=true}={}){const pendingPromise=new Pending("theme_boost/drawers:close");const hideEvent=this.dispatchEvent(Drawers.eventTypes.drawerHide,true);if(hideEvent.defaultPrevented){return}const closeButton=this.drawerNode.querySelector(SELECTORS.CLOSEBTN);closeButton?.classList.toggle("hidden",true);const headerContent=this.drawerNode.querySelector(SELECTORS.HEADERCONTENT);headerContent?.classList.toggle("hidden",true);if(closeButton.hasAttribute("data-original-title")){jQuery(closeButton)?.tooltip("hide")}const preference=this.drawerNode.dataset.preference;if(preference&&updatePreferences&&!isSmall()){setUserPreference(preference,false)}const state=this.drawerNode.dataset.state;if(state){const page=document.getElementById("page");page.classList.remove(state)}Aria.hide(this.drawerNode);this.drawerNode.classList.remove(CLASSES.SHOW);getBackdrop().then(backdrop=>{backdrop.hide();if(isSmall()){const pageWrapper=document.getElementById("page");pageWrapper.style.overflow="visible"}return backdrop}).catch();let openButton=getDrawerOpenButton(this.drawerNode.id);if(openButton){disableButtonTooltip(openButton,true)}setTimeout(()=>{if(openButton&&focusOnOpenButton){openButton.focus()}pendingPromise.resolve()},300);this.dispatchEvent(Drawers.eventTypes.drawerHidden)}toggleVisibility(){if(this.drawerNode.classList.contains(CLASSES.SHOW)){this.closeDrawer()}else{this.openDrawer()}}displace(scrollPosition){let displace=scrollPosition;let openButton=getDrawerOpenButton(this.drawerNode.id);if(scrollPosition===0){this.drawerNode.style.transform="";if(openButton){openButton.style.transform=""}return}const state=this.drawerNode.dataset?.state;const drawrWidth=this.drawerNode.offsetWidth;let scrollThreshold=drawrWidth;let direction=-1;if(state==="show-drawer-right"){direction=1;scrollThreshold=THRESHOLD}if(Math.abs(scrollPosition)>scrollThreshold){displace=Math.sign(scrollPosition)*(drawrWidth+THRESHOLD)}displace*=direction;const transform=`translateX(${displace}px)`;if(openButton){openButton.style.transform=transform}this.drawerNode.style.transform=transform}preventOverlap(currentFocus){if(!this.isOpen||this.drawerNode.dataset?.state==="show-drawer-left"){return}const drawrWidth=this.drawerNode.offsetWidth;const element=currentFocus.getBoundingClientRect();let overlapping=element.right+THRESHOLD>this.boundingRect.left&&element.left-THRESHOLD<this.boundingRect.right;if(overlapping){const currentBoundingRect=this.drawerNode.getBoundingClientRect();overlapping=element.bottom>currentBoundingRect.top&&element.top<currentBoundingRect.bottom}if(overlapping){let displaceOut=drawrWidth+1;if(window.right_to_left()){displaceOut*=-1}this.displace(displaceOut)}else{this.displace(window.scrollX)}}static closeAllDrawers(){drawerMap.forEach(drawerInstance=>{drawerInstance.closeDrawer()})}static closeOtherDrawers(comparisonInstance){drawerMap.forEach(drawerInstance=>{if(drawerInstance===comparisonInstance){return}drawerInstance.closeDrawer()})}static preventCoveringFocusedElement(){const currentFocus=document.activeElement;const pagecontent=document.querySelector(SELECTORS.PAGECONTENT);if(!currentFocus||!pagecontent?.contains(currentFocus)){Drawers.displaceDrawers(window.scrollX);return}drawerMap.forEach(drawerInstance=>{drawerInstance.preventOverlap(currentFocus)})}static displaceDrawers(displace){drawerMap.forEach(drawerInstance=>{drawerInstance.displace(displace)})}}const setLastUsedToggle=toggleButton=>{if(toggleButton.dataset.target){document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target="${toggleButton.dataset.target}"]`).forEach(btn=>{btn.dataset.lastused=false});toggleButton.dataset.lastused=true}};const focusLastUsedToggle=target=>{const lastUsedButton=document.querySelector(`${SELECTORS.BUTTONS}[data-target="${target}"][data-lastused="true"`);if(lastUsedButton){lastUsedButton.focus()}};const registerListeners=()=>{document.addEventListener("click",e=>{const toggleButton=e.target.closest(SELECTORS.TOGGLEBTN);if(toggleButton&&toggleButton.dataset.target){e.preventDefault();const targetDrawer=document.getElementById(toggleButton.dataset.target);const drawerInstance=Drawers.getDrawerInstanceForNode(targetDrawer);setLastUsedToggle(toggleButton);drawerInstance.toggleVisibility()}const openDrawerButton=e.target.closest(SELECTORS.OPENBTN);if(openDrawerButton&&openDrawerButton.dataset.target){e.preventDefault();const targetDrawer=document.getElementById(openDrawerButton.dataset.target);const drawerInstance=Drawers.getDrawerInstanceForNode(targetDrawer);setLastUsedToggle(toggleButton);drawerInstance.openDrawer()}const closeDrawerButton=e.target.closest(SELECTORS.CLOSEBTN);if(closeDrawerButton&&closeDrawerButton.dataset.target){e.preventDefault();const targetDrawer=document.getElementById(closeDrawerButton.dataset.target);const drawerInstance=Drawers.getDrawerInstanceForNode(targetDrawer);drawerInstance.closeDrawer();focusLastUsedToggle(closeDrawerButton.dataset.target)}});document.addEventListener(Drawers.eventTypes.drawerShow,e=>{if(isLarge()){return}Drawers.closeOtherDrawers(e.detail.drawerInstance)});const btnSelector=`${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;document.addEventListener("focusout",e=>{const button=e.target.closest(btnSelector);if(button?.dataset.restoreTooltipOnBlur!==undefined){enableButtonTooltip(button)}});const closeOnResizeListener=()=>{if(isSmall()){let anyOpen=false;drawerMap.forEach(drawerInstance=>{disableDrawerTooltips(drawerInstance.drawerNode);if(drawerInstance.isOpen){if(drawerInstance.closeOnResize){drawerInstance.closeDrawer()}else{anyOpen=true}}});if(anyOpen){getBackdrop().then(backdrop=>backdrop.show()).catch()}}else{drawerMap.forEach(drawerInstance=>{enableDrawerTooltips(drawerInstance.drawerNode)});getBackdrop().then(backdrop=>backdrop.hide()).catch()}};document.addEventListener("scroll",()=>{const body=document.querySelector("body");if(window.scrollY>=window.innerHeight){body.classList.add(CLASSES.SCROLLED)}else{body.classList.remove(CLASSES.SCROLLED)}Drawers.displaceDrawers(window.scrollX)});const preventOverlap=debounce(Drawers.preventCoveringFocusedElement,100);document.addEventListener("focusin",preventOverlap);document.addEventListener("focusout",preventOverlap);window.addEventListener("resize",debounce(closeOnResizeListener,400))};registerListeners();const drawers=document.querySelectorAll(SELECTORS.DRAWERS);drawers.forEach(drawerNode=>Drawers.getDrawerInstanceForNode(drawerNode));