import $ from"jquery";import*as Repository from"block_myoverview/repository";import*as PagedContentFactory from"core/paged_content_factory";import*as PubSub from"core/pubsub";import*as CustomEvents from"core/custom_interaction_events";import*as Notification from"core/notification";import*as Templates from"core/templates";import*as CourseEvents from"core_course/events";import SELECTORS from"block_myoverview/selectors";import*as PagedContentEvents from"core/paged_content_events";import*as Aria from"core/aria";import{debounce}from"core/utils";import{setUserPreference}from"core_user/repository";const TEMPLATES={COURSES_CARDS:"block_myoverview/view-cards",COURSES_LIST:"block_myoverview/view-list",COURSES_SUMMARY:"block_myoverview/view-summary",NOCOURSES:"core_course/no-courses"};const GROUPINGS={GROUPING_ALLINCLUDINGHIDDEN:"allincludinghidden",GROUPING_ALL:"all",GROUPING_INPROGRESS:"inprogress",GROUPING_FUTURE:"future",GROUPING_PAST:"past",GROUPING_FAVOURITES:"favourites",GROUPING_HIDDEN:"hidden"};const NUMCOURSES_PERPAGE=[12,24,48,96,0];let loadedPages=[];let courseOffset=0;let lastPage=0;let lastLimit=0;let namespace=null;let summaryDisplayLoaded=false;const getFilterValues=root=>{const courseRegion=root.find(SELECTORS.courseView.region);return{display:courseRegion.attr("data-display"),grouping:courseRegion.attr("data-grouping"),sort:courseRegion.attr("data-sort"),displaycategories:courseRegion.attr("data-displaycategories"),customfieldname:courseRegion.attr("data-customfieldname"),customfieldvalue:courseRegion.attr("data-customfieldvalue")}};const DEFAULT_PAGED_CONTENT_CONFIG={ignoreControlWhileLoading:true,controlPlacementBottom:true,persistentLimitKey:"block_myoverview_user_paging_preference"};const getMyCourses=(filters,limit)=>{const params={offset:courseOffset,limit:limit,classification:filters.grouping,sort:filters.sort,customfieldname:filters.customfieldname,customfieldvalue:filters.customfieldvalue};if(filters.display==="summary"){params.requiredfields=Repository.SUMMARY_REQUIRED_FIELDS;summaryDisplayLoaded=true}else{params.requiredfields=Repository.CARDLIST_REQUIRED_FIELDS}return Repository.getEnrolledCoursesByTimeline(params)};const getSearchMyCourses=(filters,limit,searchValue)=>{const params={offset:courseOffset,limit:limit,classification:"search",sort:filters.sort,customfieldname:filters.customfieldname,customfieldvalue:filters.customfieldvalue,searchvalue:searchValue};if(filters.display==="summary"){params.requiredfields=Repository.SUMMARY_REQUIRED_FIELDS;summaryDisplayLoaded=true}else{params.requiredfields=Repository.CARDLIST_REQUIRED_FIELDS;summaryDisplayLoaded=false}return Repository.getEnrolledCoursesByTimeline(params)};const getFavouriteIconContainer=(root,courseId)=>{return root.find(SELECTORS.FAVOURITE_ICON+'[data-course-id="'+courseId+'"]')};const getPagedContentContainer=(root,index)=>{return root.find('[data-region="paged-content-page"][data-page="'+index+'"]')};const getCourseId=root=>{return root.attr("data-course-id")};const hideFavouriteIcon=(root,courseId)=>{const iconContainer=getFavouriteIconContainer(root,courseId);const isFavouriteIcon=iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);isFavouriteIcon.addClass("hidden");Aria.hide(isFavouriteIcon);const notFavourteIcon=iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);notFavourteIcon.removeClass("hidden");Aria.unhide(notFavourteIcon)};const showFavouriteIcon=(root,courseId)=>{const iconContainer=getFavouriteIconContainer(root,courseId);const isFavouriteIcon=iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);isFavouriteIcon.removeClass("hidden");Aria.unhide(isFavouriteIcon);const notFavourteIcon=iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);notFavourteIcon.addClass("hidden");Aria.hide(notFavourteIcon)};const getAddFavouriteMenuItem=(root,courseId)=>{return root.find('[data-action="add-favourite"][data-course-id="'+courseId+'"]')};const getRemoveFavouriteMenuItem=(root,courseId)=>{return root.find('[data-action="remove-favourite"][data-course-id="'+courseId+'"]')};const addToFavourites=(root,courseId)=>{const removeAction=getRemoveFavouriteMenuItem(root,courseId);const addAction=getAddFavouriteMenuItem(root,courseId);setCourseFavouriteState(courseId,true).then(success=>{if(success){PubSub.publish(CourseEvents.favourited,courseId);removeAction.removeClass("hidden");addAction.addClass("hidden");showFavouriteIcon(root,courseId)}else{Notification.alert("Starring course failed","Could not change favourite state")}return}).catch(Notification.exception)};const removeFromFavourites=(root,courseId)=>{const removeAction=getRemoveFavouriteMenuItem(root,courseId);const addAction=getAddFavouriteMenuItem(root,courseId);setCourseFavouriteState(courseId,false).then(success=>{if(success){PubSub.publish(CourseEvents.unfavorited,courseId);removeAction.addClass("hidden");addAction.removeClass("hidden");hideFavouriteIcon(root,courseId)}else{Notification.alert("Starring course failed","Could not change favourite state")}return}).catch(Notification.exception)};const getHideCourseMenuItem=(root,courseId)=>{return root.find('[data-action="hide-course"][data-course-id="'+courseId+'"]')};const getShowCourseMenuItem=(root,courseId)=>{return root.find('[data-action="show-course"][data-course-id="'+courseId+'"]')};const hideCourse=(root,courseId)=>{const hideAction=getHideCourseMenuItem(root,courseId);const showAction=getShowCourseMenuItem(root,courseId);const filters=getFilterValues(root);setCourseHiddenState(courseId,true);if(filters.grouping!==GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN){hideElement(root,courseId)}hideAction.addClass("hidden");showAction.removeClass("hidden")};const showCourse=(root,courseId)=>{const hideAction=getHideCourseMenuItem(root,courseId);const showAction=getShowCourseMenuItem(root,courseId);const filters=getFilterValues(root);setCourseHiddenState(courseId,null);if(filters.grouping!==GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN){hideElement(root,courseId)}hideAction.removeClass("hidden");showAction.addClass("hidden")};const setCourseHiddenState=(courseId,status)=>{if(status===false){status=null}return setUserPreference(`block_myoverview_hidden_course_${courseId}`,status).catch(Notification.exception)};const hideElement=(root,id)=>{const pagingBar=root.find('[data-region="paging-bar"]');const jumpto=parseInt(pagingBar.attr("data-active-page-number"));const courseList=loadedPages[jumpto];let reducedCourse=courseList.courses.reduce((accumulator,current)=>{if(+id!==+current.id){accumulator.push(current)}return accumulator},[]);if(typeof loadedPages[jumpto+1]!=="undefined"){const newElement=loadedPages[jumpto+1].courses.slice(0,1);loadedPages.forEach((courseList,index)=>{if(index>jumpto){let popElement=[];if(typeof loadedPages[index+1]!=="undefined"){popElement=loadedPages[index+1].courses.slice(0,1)}loadedPages[index].courses=[...loadedPages[index].courses.slice(1),...popElement]}});reducedCourse=[...reducedCourse,...newElement]}if(lastPage===jumpto+1&&loadedPages[jumpto+1].courses.length===0){const pagedContentContainer=root.find('[data-region="paged-content-container"]');PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr("id"),jumpto)}loadedPages[jumpto].courses=reducedCourse;courseOffset--;const pagedContentPage=getPagedContentContainer(root,jumpto);renderCourses(root,loadedPages[jumpto]).then((html,js)=>{return Templates.replaceNodeContents(pagedContentPage,html,js)}).catch(Notification.exception);loadedPages.forEach((courseList,index)=>{if(index>jumpto){const page=getPagedContentContainer(root,index);page.remove()}})};const setCourseFavouriteState=(courseId,status)=>{return Repository.setFavouriteCourses({courses:[{id:courseId,favourite:status}]}).then(result=>{if(result.warnings.length===0){loadedPages.forEach(courseList=>{courseList.courses.forEach((course,index)=>{if(course.id==courseId){courseList.courses[index].isfavourite=status}})});return true}else{return false}}).catch(Notification.exception)};const noCoursesRender=root=>{const nocoursesimg=root.find(SELECTORS.courseView.region).attr("data-nocoursesimg");const newcourseurl=root.find(SELECTORS.courseView.region).attr("data-newcourseurl");return Templates.render(TEMPLATES.NOCOURSES,{nocoursesimg:nocoursesimg,newcourseurl:newcourseurl})};const renderCourses=(root,coursesData)=>{const filters=getFilterValues(root);let currentTemplate="";if(filters.display==="card"){currentTemplate=TEMPLATES.COURSES_CARDS}else if(filters.display==="list"){currentTemplate=TEMPLATES.COURSES_LIST}else{currentTemplate=TEMPLATES.COURSES_SUMMARY}if(!coursesData){return noCoursesRender(root)}else{if(Array.isArray(coursesData.courses)===false){coursesData.courses=Object.values(coursesData.courses)}coursesData.courses=coursesData.courses.map(course=>{course.showcoursecategory=filters.displaycategories==="on";return course});if(coursesData.courses.length){return Templates.render(currentTemplate,{courses:coursesData.courses})}else{return noCoursesRender(root)}}};const setLimit=root=>{return limit=>root.find(SELECTORS.courseView.region).attr("data-paging",limit)};const registerPagedEventHandlers=(root,namespace)=>{const event=namespace+PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;PubSub.subscribe(event,setLimit(root))};const itemsPerPageFunc=(pagingLimit,root)=>{let itemsPerPage=NUMCOURSES_PERPAGE.map(value=>{let active=false;if(value===pagingLimit){active=true}return{value:value,active:active}});const totalCourseCount=parseInt(root.find(SELECTORS.courseView.region).attr("data-totalcoursecount"),10);return itemsPerPage.filter(pagingOption=>{if(pagingOption.value===0&&totalCourseCount>100){return false}return pagingOption.value<totalCourseCount})};const pageBuilder=(coursesData,currentPage,pageData,actions,activeSearch=null)=>{let courses=coursesData.courses?coursesData.courses:coursesData;let nextPageStart=0;let pageCourses=[];if(typeof loadedPages[currentPage]!=="undefined"){pageCourses=loadedPages[currentPage].courses;const currentPageLength=pageCourses.length;if(currentPageLength<pageData.limit){nextPageStart=pageData.limit-currentPageLength;pageCourses={...loadedPages[currentPage].courses,...courses.slice(0,nextPageStart)}}}else{nextPageStart=pageData.limit||false;pageCourses=pageData.limit>0?courses.slice(0,pageData.limit):courses}loadedPages[currentPage]={courses:pageCourses};const remainingCourses=nextPageStart!==false?courses.slice(nextPageStart,courses.length):[];if(remainingCourses.length){loadedPages[currentPage+1]={courses:remainingCourses}}if(loadedPages[currentPage].courses.length<pageData.limit||!remainingCourses.length){lastPage=currentPage;if(activeSearch===null){actions.allItemsLoaded(currentPage)}}else if(typeof loadedPages[currentPage+1]!=="undefined"&&loadedPages[currentPage+1].courses.length<pageData.limit){lastPage=currentPage+1}courseOffset=coursesData.nextoffset};const resetGlobals=()=>{courseOffset=0;loadedPages=[];lastPage=0;lastLimit=0};const standardFunctionalityCurry=()=>{resetGlobals();return(filters,currentPage,pageData,actions,root,promises,limit)=>{const pagePromise=getMyCourses(filters,limit).then(coursesData=>{pageBuilder(coursesData,currentPage,pageData,actions);return renderCourses(root,loadedPages[currentPage])}).catch(Notification.exception);promises.push(pagePromise)}};const searchFunctionalityCurry=()=>{resetGlobals();return(filters,currentPage,pageData,actions,root,promises,limit,inputValue)=>{const searchingPromise=getSearchMyCourses(filters,limit,inputValue).then(coursesData=>{pageBuilder(coursesData,currentPage,pageData,actions);return renderCourses(root,loadedPages[currentPage])}).catch(Notification.exception);promises.push(searchingPromise)}};const initializePagedContent=(root,promiseFunction,inputValue=null)=>{const pagingLimit=parseInt(root.find(SELECTORS.courseView.region).attr("data-paging"),10);let itemsPerPage=itemsPerPageFunc(pagingLimit,root);const config={...{},...DEFAULT_PAGED_CONTENT_CONFIG};config.eventNamespace=namespace;const pagedContentPromise=PagedContentFactory.createWithLimit(itemsPerPage,(pagesData,actions)=>{let promises=[];pagesData.forEach(pageData=>{const currentPage=pageData.pageNumber;let limit=pageData.limit>0?pageData.limit:0;if(+lastLimit!==+limit){loadedPages=[];courseOffset=0;lastPage=0}if(lastPage===currentPage){actions.allItemsLoaded(lastPage);promises.push(renderCourses(root,loadedPages[currentPage]));return}lastLimit=limit;if(typeof loadedPages[currentPage+1]==="undefined"){if(typeof loadedPages[currentPage]==="undefined"){limit*=2}}const filters=getFilterValues(root);promiseFunction(filters,currentPage,pageData,actions,root,promises,limit,inputValue)});return promises},config);pagedContentPromise.then((html,js)=>{registerPagedEventHandlers(root,namespace);return Templates.replaceNodeContents(root.find(SELECTORS.courseView.region),html,js)}).catch(Notification.exception)};const registerEventListeners=(root,page)=>{CustomEvents.define(root,[CustomEvents.events.activate]);root.on(CustomEvents.events.activate,SELECTORS.ACTION_ADD_FAVOURITE,(e,data)=>{const favourite=$(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);const courseId=getCourseId(favourite);addToFavourites(root,courseId);data.originalEvent.preventDefault()});root.on(CustomEvents.events.activate,SELECTORS.ACTION_REMOVE_FAVOURITE,(e,data)=>{const favourite=$(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);const courseId=getCourseId(favourite);removeFromFavourites(root,courseId);data.originalEvent.preventDefault()});root.on(CustomEvents.events.activate,SELECTORS.FAVOURITE_ICON,(e,data)=>{data.originalEvent.preventDefault()});root.on(CustomEvents.events.activate,SELECTORS.ACTION_HIDE_COURSE,(e,data)=>{const target=$(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);const courseId=getCourseId(target);hideCourse(root,courseId);data.originalEvent.preventDefault()});root.on(CustomEvents.events.activate,SELECTORS.ACTION_SHOW_COURSE,(e,data)=>{const target=$(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);const courseId=getCourseId(target);showCourse(root,courseId);data.originalEvent.preventDefault()});const input=page.querySelector(SELECTORS.region.searchInput);const clearIcon=page.querySelector(SELECTORS.region.clearIcon);clearIcon.addEventListener("click",()=>{input.value="";input.focus();clearSearch(clearIcon,root)});input.addEventListener("input",debounce(()=>{if(input.value===""){clearSearch(clearIcon,root)}else{activeSearch(clearIcon);initializePagedContent(root,searchFunctionalityCurry(),input.value.trim())}},1e3))};export const clearSearch=(clearIcon,root)=>{clearIcon.classList.add("d-none");init(root)};const activeSearch=clearIcon=>{clearIcon.classList.remove("d-none")};export const init=root=>{root=$(root);loadedPages=[];lastPage=0;courseOffset=0;if(!root.attr("data-init")){const page=document.querySelector(SELECTORS.region.selectBlock);registerEventListeners(root,page);namespace="block_myoverview_"+root.attr("id")+"_"+Math.random();root.attr("data-init",true)}initializePagedContent(root,standardFunctionalityCurry())};export const reset=root=>{if(loadedPages.length>0){const filters=getFilterValues(root);if(filters.display==="summary"&&!summaryDisplayLoaded){const page=document.querySelector(SELECTORS.region.selectBlock);const input=page.querySelector(SELECTORS.region.searchInput);if(input.value!==""){initializePagedContent(root,searchFunctionalityCurry(),input.value.trim())}else{initializePagedContent(root,standardFunctionalityCurry())}}else{loadedPages.forEach((courseList,index)=>{let pagedContentPage=getPagedContentContainer(root,index);renderCourses(root,courseList).then((html,js)=>{return Templates.replaceNodeContents(pagedContentPage,html,js)}).catch(Notification.exception)})}}else{init(root)}};